package GameState;

import Main.GamePanel;
import TileMap.*;
import Entity.*;
import Entity.Enemies.*;
import Entity.Enemies.Coin;
import Audio.AudioPlayer;

import java.awt.*;
import java.awt.event.KeyEvent;
import java.util.ArrayList;

public class Level1State extends GameState {
	
	private TileMap tileMap;
	private Background bg1,bg2,bg3;
	private Player player;
	
	private String[] options = {
			"PRESS 'W' TO JUMP",
			"'W + E' TO FLY",
			"'R' TO ATTACK",
			"EACH GATE IS A DIFFERENT LEVEL. ",
			"CHOOSE WISELY"
		};
	private Color titleColor;
	private Font titleFont;
	
	private ArrayList<Enemy> enemies;
	private ArrayList<Explosion> explosions;
   
	private Coin coin1, coin2;
	private HUD hud;
	
	private AudioPlayer bgMusic;
	
	
	//---------------------------------------------------------------------//
	
	public Level1State(GameStateManager gsm) {
		
		super(gsm);           //call the super class
		
		titleColor = new Color(128, 0, 0);
		titleFont = new Font(
				"Century Gothic",
				Font.BOLD,
				11);
		init();
	}
	
	public void init() {
		
		//Initializing the different variables and elements in the level
		
		tileMap = new TileMap(30);
		tileMap.loadTiles("/Tilesets/lvl1tileset.png");
		tileMap.loadMap("/Maps/lvl1.map");
		tileMap.setPosition(0, 0);
		tileMap.setTween(1);
		
		
		bg1 = new Background("/Backgrounds/forestbg1.jpg", 0.1);
		bg2 = new Background("/Backgrounds/forestbg2.png", 0.2);
		bg3 = new Background("/Backgrounds/forestbg3.png", 0.3);
		
		player = new Player(tileMap);
		player.setPosition(66, 188);
		
		
		populateEnemies();
		
		explosions = new ArrayList<Explosion>();
		
		hud = new HUD(player);
		
		bgMusic = new AudioPlayer("/Music/alevelmusic.mp3");
		bgMusic.play();
		
		
		
	}
	
	private void populateEnemies() {
		
		
		//Adding Enemies to an Array List
		enemies = new ArrayList<Enemy>();
		
		Slime s;
		Point[] points = new Point[] {
			//coins
			new Point(2100, 170),
			new Point(2200, 170),
			//enemies
			//new Point(200, 100),
			new Point(1584, 125),
			new Point(1800, 125),
			new Point(1820, 125),
			new Point(1840, 125)
			
			
		};
		for(int i = 0; i < points.length; i++) {
			if(i < 2) {
				if(i == 0) {
				coin1 = new Coin(tileMap, "/ItemSprite/gatea.png");
				coin1.setPosition(points[i].x, points[i].y);
				enemies.add(coin1);
				
				}
				if(i == 1) {
				coin2 = new Coin(tileMap, "/ItemSprite/gateb.png");
				
				coin2.setPosition(points[i].x, points[i].y);
				enemies.add(coin2);
			
				}
			}
			else {
			s = new Slime(tileMap);
			s.setPosition(points[i].x, points[i].y);
			enemies.add(s);
			}
		}
		
	}
	
	public void update() {
		
		
		//Condition in which player loses
		if(player.dyingCondition(888, 1397, 215) || player.getHealth() == 0) {
				
			if(player.getLives() == 1) {
				bgMusic.close();
		      	gsm.setState(gsm.DEATHSTATE);
	     	}
			
			
			enemies.removeAll(enemies);
			populateEnemies();
			
			player.setHealth(5);
			player.setLives(player.getLives() - 1);
			player.setPosition(66, 188);
		}
		
		
		//Level changing condition
		if(player.intersects(coin1)) {
			bgMusic.stop();
			gsm.lives = player.getLives();
			gsm.health = player.getHealth();
			gsm.setState(GameStateManager.LEVEL2A);
			
		}
		
		if(player.intersects(coin2)) {
			bgMusic.stop();
			gsm.lives = player.getLives();
			gsm.health = player.getHealth();
			gsm.setState(GameStateManager.LEVEL2B);
		}
		
		
		//update music
		bgMusic.loop();
		
		
		// update player
		player.update();
		
	    //camera Movement
		tileMap.setPosition(
			GamePanel.WIDTH / 2 - player.getx(),
			GamePanel.HEIGHT / 2 - player.gety()
		);
	
		
		// set background
		
		bg1.setPosition(tileMap.getx(), tileMap.gety());
		bg2.setPosition(tileMap.getx(), tileMap.gety());
		bg3.setPosition(tileMap.getx(), tileMap.gety());
		
		// attack enemies
		player.checkAttack(enemies);
		
		// update explosions
				for(int i = 0; i < explosions.size(); i++) {
					explosions.get(i).update();
					if(explosions.get(i).shouldRemove()) {
						explosions.remove(i);
						i--;
					}
				}
		

			
			
		// update all enemies
		for(int i = 0; i < enemies.size(); i++) {
			Enemy e = enemies.get(i);
			e.update();
			if(e.isDead()) {
				
				enemies.remove(i);
				i--;
				explosions.add(
					new Explosion(e.getx(), e.gety()));
			}
		}
		
	}
	
	public void draw(Graphics2D g) {
		
		g.setColor(titleColor);
		g.setFont(titleFont);
		
		// draw bg
		
		bg1.draw(g);
		bg2.draw(g);
		bg3.draw(g);
		
		// draw tilemap
		tileMap.draw(g);
		
		
		
		
		
		// draw enemies
		for(int i = 0; i < enemies.size(); i++) {
			enemies.get(i).draw(g);
		}
		
		// draw player
				player.draw(g);
		
		// draw explosions
		for(int i = 0; i < explosions.size(); i++) {
			explosions.get(i).setMapPosition(
				(int)tileMap.getx(), (int)tileMap.gety());
			explosions.get(i).draw(g);
		}
		
		// draw hud
		hud.draw(g);
		
		
		//draw text at certain co-ordinate ranges
		if((player.getx() > 160 && player.getx() < 200)) {
			g.setFont(titleFont);
			
				
				g.setColor(Color.WHITE);
				g.drawString(options[0], 105, 75 + 1 * 15);
			    
			
		}
		
		if((player.getx() > 430 && player.getx() < 470)) {
			g.setFont(titleFont);
			
				
				g.setColor(Color.WHITE);
				g.drawString(options[1], 75, 75 + 1 * 15);
			    
			
		}
		if((player.getx() > 1390 && player.getx() < 1430)) {
			g.setFont(titleFont);
			
				
				g.setColor(Color.WHITE);
				g.drawString(options[2], 75, 75 + 1 * 15);
			    
			
		}
		
		if((player.getx() > 1990 && player.getx() < 2030)) {
			g.setFont(titleFont);
			
				
				g.setColor(Color.WHITE);
				g.drawString(options[3], 75, 60 + 1 * 15);
				g.drawString(options[4], 75, 60 + 2* 15);
			    
			
		}
		
	}
	

	
	public void keyPressed(int k) {
		if(k == KeyEvent.VK_LEFT) player.setLeft(true);
		if(k == KeyEvent.VK_RIGHT) player.setRight(true);
		if(k == KeyEvent.VK_UP) player.setUp(true);
		if(k == KeyEvent.VK_DOWN) player.setDown(true);
		if(k == KeyEvent.VK_W) player.setJumping(true);
		if(k == KeyEvent.VK_E) player.setGliding(true);
		if(k == KeyEvent.VK_R) player.setScratching();		
		if(k == KeyEvent.VK_ESCAPE) gsm.setPaused(true);
		if(gsm.paused) {
			if(k == KeyEvent.VK_ENTER) gsm.setPaused(false);
			if(k == KeyEvent.VK_M) {
				bgMusic.stop();
				gsm.setPaused(false);
				gsm.setState(gsm.MENUSTATE);
			}
		}
	}
	
	public void keyReleased(int k) {
		if(k == KeyEvent.VK_LEFT) player.setLeft(false);
		if(k == KeyEvent.VK_RIGHT) player.setRight(false);
		if(k == KeyEvent.VK_UP) player.setUp(false);
		if(k == KeyEvent.VK_DOWN) player.setDown(false);
		if(k == KeyEvent.VK_W) player.setJumping(false);
		if(k == KeyEvent.VK_E) player.setGliding(false);
	}
	
}












