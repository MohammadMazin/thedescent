package GameState;

import Main.GamePanel;
import TileMap.*;
import Entity.*;
import Entity.Enemies.*;
import Audio.AudioPlayer;

import java.awt.*;
import java.awt.event.KeyEvent;
import java.util.ArrayList;

public class LevelFinal extends GameState {
	
	private TileMap tileMap;
	private Background bg1,bg2,bg3;
	
	private DarkEnergy de;
	
	private Player player;
	private String[] options = {
			"DESTROY THE CRYSTALS"
		};
	private Color titleColor;
	private Font titleFont;
	
	
	private ArrayList<Enemy> enemies;
	private ArrayList<Explosion> explosions;
	private ArrayList<Enemy> crystals;
	

	private Demon demon;
    private FireSkull f1,f2,f3,f4,f5;
	
	private int crysNum, temp;
	private boolean safeState;
	
	private boolean playRoar;
	private HUD hud;
	
	private AudioPlayer bgMusic, wings, roar, itemPickup;
	
	private HealthPack hp1,hp2;
	private LivesPack lp;
	
	public LevelFinal(GameStateManager gsm) {
		super(gsm);                 //Calls super class
		titleColor = new Color(128, 0, 0);
		titleFont = new Font(
				"Century Gothic",
				Font.BOLD,
				11);
		init();
	}
	
	public void init() {
		
		tileMap = new TileMap(30);
		tileMap.loadTiles("/Tilesets/BossTileset.png");
		tileMap.loadMap("/Maps/finalLevelSafe.map");
		tileMap.setPosition(0, 0);
		tileMap.setTween(1);
		
	
		bg1 = new Background("/Backgrounds/finalbg1.png", 0.1);
		bg2 = new Background("/Backgrounds/finalbg2.png", 0.2);
		bg3 = new Background("/Backgrounds/finalbg3.png", 0.3);
		
		player = new Player(tileMap);
		player.setPosition(330, 250);
		player.setFiring(true);
		
		de = new DarkEnergy(tileMap, true);
		
		demon = new Demon(tileMap);
		demon.setPosition(3000, 340);
		
	
		explosions = new ArrayList<Explosion>();
		
		
		
		
		hud = new HUD(player);
		
		bgMusic = new AudioPlayer("/Music/BossMusic.mp3");
		roar = new AudioPlayer("/SFX/DemonRoarStart.mp3");
		wings = new AudioPlayer("/SFX/FlappingWings.mp3");
		itemPickup = new AudioPlayer("/SFX/menuselect.mp3");
		
		bgMusic.play();
		wings.play();
		
		safeState = true;
		playRoar = true;
		
		
		hp1 = new HealthPack(tileMap);
		hp2 = new HealthPack(tileMap);
		lp = new LivesPack(tileMap);
		
		hp1.setPosition(2083, 726);
		hp2.setPosition(3941, 731);
		lp.setPosition(   87, 732);
		
		populateEnemies();
		
		player.setHealth(gsm.health);
		player.setLives(gsm.lives);

		
		
	}
        
    private void populateEnemies() {
    	
    	
		
		enemies = new ArrayList<Enemy>();
		crystals = new ArrayList<Enemy>();
		
		Crystal c;
		Slime s;
		
		Point[] points = new Point[] {
			//coins
			new Point(2100, 170),
			new Point(2200, 170),
			//Slime
			
			new Point(2050, 485),
			new Point(2070, 485),
			new Point(2060, 330),
			new Point(2070, 330),
			new Point(2090, 485),
			new Point(2170, 330),
			new Point(2190, 330),
			new Point(3130, 550),
			new Point(3160, 550),
			new Point(3185, 550),
			
			//FireSkull
			new Point(1360, 520),
			new Point(2320, 670), //L
			new Point(3340, 540), //L
			new Point(2980, 400), 
			new Point(3310, 130), //L
			
			//Crystals
			new Point(670, 490),
			new Point(1390, 140),
			new Point(2320, 110),
			new Point(2984,  71)
			
			
		};
		
		//Creating enemy objects and adding them to the ArrayList
		for(int i = 0; i < points.length - 4; i++) {
			if(i < 2) {
			
				
			}
			else if(i >= 2 && i <= 11){
			s = new Slime(tileMap);
			s.setPosition(points[i].x, points[i].y);
			enemies.add(s);
			}
			else if( i == 12) {
				f1 =  new FireSkull(tileMap);
				f1.setPosition(points[i].x, points[i].y);
				enemies.add(f1);
			}
			else if( i == 13) {
				f2 =  new FireSkull(tileMap);
				f2.setPosition(points[i].x, points[i].y);
				enemies.add(f2);
			}
			else if( i == 14) {
				f3 =  new FireSkull(tileMap);
				f3.setPosition(points[i].x, points[i].y);;
				enemies.add(f3);
			}
			else if( i == 15) {
				f4 =  new FireSkull(tileMap);
				f4.setPosition(points[i].x, points[i].y);
				enemies.add(f4);
			}
			else if( i == 16) {
				f5 =  new FireSkull(tileMap);
				f5.setPosition(points[i].x, points[i].y);
				enemies.add(f5);
			
			}
			
		}
		
		for(int i = 0; i < 4; i++) {
			
			c = new Crystal(tileMap);
			c.setPosition(points[i + 16].x, points[i + 16].y);
			crystals.add(c);
		}
		
		crysNum = temp = crystals.size();
	}

	
    
    
	public void update() {
		
		lp.update();
	    if(player.intersects(lp)) {
	    	lp.setPosition(0, 0);
	    	player.setLives(player.getLives() + 1);
	    	itemPickup.play();
	    }
		
		hp1.update();
	    if(player.intersects(hp1)) {
	    	hp1.setPosition(0, 0);
	    	player.setHealth(5);
	    	itemPickup.play();
	    }
	    
	    hp2.update();
	    if(player.intersects(hp2)) {
	    	hp2.setPosition(0, 0);
	    	player.setHealth(5);
	    	itemPickup.play();
	    }
		
   
	
   System.out.print(crystals.size());
		
		
	if(player.dyingCondition(827, 1304, 787) ||
       player.dyingCondition(1497, 3074, 787) ||
       player.dyingCondition(2268, 3026, 787) ||
       player.dyingCondition(3141, 3868, 787) || player.getHealth() == 0) {
	
		if(player.getLives() == 1) {
			bgMusic.close();
			gsm.setState(gsm.DEATHSTATE);
		}
		

		enemies.removeAll(enemies);
		crystals.removeAll(crystals);
		populateEnemies();
		
		player.setHealth(5);
		player.setLives(player.getLives() - 1);
		player.setPosition(330, 250);
		
	
		hp1.setPosition(2083, 726);
		hp2.setPosition(3941, 731);
		
	}
	
	if(playRoar) {
		playRoar = false;
          roar.play();
	}
	
	    if(temp != crystals.size()) {
	    	
	    	playRoar = true;
	    }
	    
	    temp = crystals.size();
        	
	    wings.loop();
	    
	    if(safeState) {
	    	tileMap.loadMap("/Maps/finalLevelSafe.map");
	    	
	    		
	    }
	    else
	    	tileMap.loadMap("/Maps/finalLevelFight.map");
		
	    if (player.getx() > 635  && crysNum == crystals.size())
	    	safeState = false;
	    else
	    	safeState = true;
	    
	    if(player.getx() > 1360 &&  player.getx() < 1400 && player.gety() > 700 ||
	       player.getx() > 2050 &&  player.getx() < 2090 && player.gety() > 700	||
	       player.getx() > 2980 &&  player.getx() < 3020 && player.gety() > 700) {
	    	crysNum = crystals.size();
	    	playRoar = false;
	    }
	    
	  
	    
		de.update();
		
		
		demon.setClose(true);
		demon.update();
		
		demon.checkFire(player);
		if(player.getx() > 600){
		  if(crystals.size() == 4)
		    	demon.setPosition(970, player.gety());
		  else if (crystals.size() == 3)
			  demon.setPosition(1690, player.gety());
		  else if (crystals.size() == 2)
			  demon.setPosition(2550, player.gety());
		  else if (crystals.size() == 1)
			  demon.setPosition(3615, player.gety());
		  else if (crystals.size() == 0)
			  demon.setPosition(970, player.gety());
		}
		
		
		f1.checkFire(player);
		f2.checkFire(player);
		f3.checkFire(player);
		f4.checkFire(player);
		f5.checkFire(player);
		
		f2.setLeft(true);
		f3.setLeft(true);
		f5.setLeft(true);
		
		f1.setClose(true);
		f2.setClose(true);
		f3.setClose(true);
		f4.setClose(true);
		f5.setClose(true);
		
		
		
		
		
		//update music
		bgMusic.loop();
		
		
		//update getting hit by enemy
	
		//death man
		
		
		// update player
		player.update();
	    //camera Movement
		tileMap.setPosition(
			GamePanel.WIDTH / 2 - player.getx(),
			GamePanel.HEIGHT / 2 - player.gety()
		);
	
		
		
		
		player.checkAttack(demon);
		player.checkAttack(enemies);
		player.checkAttack(crystals);
		
		// set background
		bg1.setPosition(tileMap.getx(), tileMap.gety());
		bg2.setPosition(tileMap.getx(), tileMap.gety());
		bg3.setPosition(tileMap.getx(), tileMap.gety());
		
		// attack enemies
		
		
		// update explosions
				for(int i = 0; i < explosions.size(); i++) {
					explosions.get(i).update();
					if(explosions.get(i).shouldRemove()) {
						explosions.remove(i);
						i--;
					}
				}
		
	 		
		// update all enemies
				for(int i = 0; i < enemies.size(); i++) {
					Enemy e = enemies.get(i);
					e.update();
					if(e.isDead()) {
						
						enemies.remove(i);
						i--;
						explosions.add(
							new Explosion(e.getx(), e.gety()));
					}
				}
		
		// update all Crystals
				for(int i = 0; i < crystals.size(); i++) {
					Enemy e = crystals.get(i);
					e.update();
					if(e.isDead()) {
						
						crystals.remove(i);
						i--;
						explosions.add(
							new Explosion(e.getx(), e.gety()));
					}
				}
		
	    if(player.getx() > 4270 && player.getx() < 4320) {
	    	bgMusic.stop();
	    	roar.stop();
	    	wings.stop();
	    	gsm.lives = player.getLives();
	    	gsm.health = player.getHealth();
	    	
	    	gsm.setState(gsm.FINALSTATEB);
	    }
		
	}
	
	public void draw(Graphics2D g) {
		
		g.setColor(titleColor);
		g.setFont(titleFont);
		
		de.draw(g);
		
		// draw bg
		bg1.draw(g);
		bg2.draw(g);
		bg3.draw(g);
		
		// draw enemies
				for(int i = 0; i < enemies.size(); i++) {
					enemies.get(i).draw(g);
				}
				
		//draw crystals
				for(int i = 0; i < crystals.size(); i++) {
					crystals.get(i).draw(g);
				}	
				
				
		// draw tilemap
		tileMap.draw(g);
		
		//draw Collectibles
		hp1.draw(g);
		hp2.draw(g);
		lp.draw(g);
		
		// draw enemies
	
		demon.draw(g);
		
		
		
		// draw player
				player.draw(g);
		
		// draw explosions
		for(int i = 0; i < explosions.size(); i++) {
			explosions.get(i).setMapPosition(
				(int)tileMap.getx(), (int)tileMap.gety());
			explosions.get(i).draw(g);
		}
		
		// draw hud
		hud.draw(g);
		
	
		
		
		//draw text
		if((player.getx() > 310 && player.getx() < 350)) {
			g.setFont(titleFont);
			
				
				g.setColor(Color.black);
				g.drawString(options[0], 100, 35 + 1 * 15);
			    
			
		}
		
		
	
		
	}
	
	public void keyPressed(int k) {
		if(k == KeyEvent.VK_LEFT) player.setLeft(true);
		if(k == KeyEvent.VK_RIGHT) player.setRight(true);
		if(k == KeyEvent.VK_UP) player.setUp(true);
		if(k == KeyEvent.VK_DOWN) player.setDown(true);
		if(k == KeyEvent.VK_W) player.setJumping(true);
		if(k == KeyEvent.VK_E) player.setGliding(true);
		if(k == KeyEvent.VK_R) player.setScratching();
		if(k == KeyEvent.VK_F) player.setFiring();
		if(k == KeyEvent.VK_ESCAPE) gsm.setPaused(true);
		if(gsm.paused) {
			if(k == KeyEvent.VK_ENTER) gsm.setPaused(false);
			if(k == KeyEvent.VK_M) gsm.setPaused(false);
		}
	}
	
	public void keyReleased(int k) {
		if(k == KeyEvent.VK_LEFT) player.setLeft(false);
		if(k == KeyEvent.VK_RIGHT) player.setRight(false);
		if(k == KeyEvent.VK_UP) player.setUp(false);
		if(k == KeyEvent.VK_DOWN) player.setDown(false);
		if(k == KeyEvent.VK_W) player.setJumping(false);
		if(k == KeyEvent.VK_E) player.setGliding(false);
	}
	
}












