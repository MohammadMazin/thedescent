package GameState;

import Main.GamePanel;
import TileMap.*;
import Entity.*;
import Entity.Enemies.*;
import Entity.Enemies.Coin;
import Audio.AudioPlayer;

import java.awt.*;
import java.awt.event.KeyEvent;
import java.util.ArrayList;

public class Level4A extends GameState {
	
	private TileMap tileMap;
	private Background bg1,bg2,bg3;
	private boolean work=false;
	private Player player;
	private DarkEnergy de;
	
	private ArrayList<Enemy> enemies;
	private ArrayList<Explosion> explosions;
	private ArrayList<Enemy>coin;
	private ArrayList<DarkEnergy> darkEn;
	private HUD hud;
	
	private AudioPlayer bgMusic, itemPickup;
	private Coin c1,c2,c3;
	
	private FireSkull f1,f2,f3,f4,f5,f6;
	private Slime s;
	
	private HealthPack hp;
	private LivesPack lp;
	
	public Level4A(GameStateManager gsm) {
		super(gsm);          //calling the superclass
		init();
	}
	
	public void init() {
		
		tileMap = new TileMap(30);
		tileMap.loadTiles("/Tilesets/mergedimage.png");
		tileMap.loadMap("/Maps/level4a.map");
		tileMap.setPosition(0, 0);
		tileMap.setTween(1);
		
		bg1 = new Background("/Backgrounds/townbg1.png", 0.1);
		bg2 = new Background("/Backgrounds/townbg2.png", 0.14);
		bg3 = new Background("/Backgrounds/cloudbg.png", 0.2);
		
		
		player = new Player(tileMap);
		
		player.setPosition(45, 836);
		
		de = new DarkEnergy(tileMap, true);
		populateEnemies();
		
		
		explosions = new ArrayList<Explosion>();
		darkEn = new ArrayList<DarkEnergy>();
		
		hud = new HUD(player);
		
		bgMusic = new AudioPlayer("/Music/alevelmusic.mp3");
        itemPickup = new AudioPlayer("/SFX/menuselect.mp3");
		
		bgMusic.play();
		
		hp = new HealthPack(tileMap);
		lp = new LivesPack(tileMap);
		
		hp.setPosition(1215, 340);
		lp.setPosition(2170, 160);
		
		player.setHealth(gsm.health);
		player.setLives(gsm.lives);

		
	}
	
	private void populateEnemies() {
		
		enemies = new ArrayList<Enemy>();
		
		
		Point[] points = new Point[] {
			new Point(753,1190),//1
			new Point(945,1190),//2
			new Point(1090,1190),//3
			new Point(1547,1190),//4
			new Point(1750,1190),//5
			new Point(1400,860),//6
			new Point(1750,860),//7
			new Point(853,394),//8
			new Point(573,394),//9
			new Point(457,180),//10
			new Point(822,211),//11
			new Point(1113,180),//12
			new Point(1718,138),//13
			new Point(2178,138),//14
			
		
			//fireskulls
			new Point(221,973),//1,20
			new Point(252,1080),//2,21
			new Point(526,1033),//3,22
			new Point(768,955),//4,23
			new Point(460,430),//5,24
			new Point(2533,1111),//6,25
	
		};
		
		//Creating enemy objects and adding them to the ArrayList
		for(int i = 0; i < points.length; i++) {
			s = new Slime(tileMap);
			
		
		
			if(i==14)
				{
				f1 = new FireSkull(tileMap);
			f1.setPosition(points[i].x, points[i].y);
			f1.setLeft(true);
			enemies.add(f1);
			}
			if(i==15)
			{
				f2 = new FireSkull(tileMap);
                f2.setLeft(true);
		        f2.setPosition(points[i].x, points[i].y);
		        enemies.add(f2);
		}
			if(i==16)
			{
				f3 = new FireSkull(tileMap);
		        f3.setPosition(points[i].x, points[i].y);
		        enemies.add(f3);
		        f3.setLeft(true);}
			if(i==17)
			{
				f4 = new FireSkull(tileMap);
		f4.setPosition(points[i].x, points[i].y);
		enemies.add(f4);
		f4.setLeft(true);
			}
			if(i==18)
			{
				f5 = new FireSkull (tileMap);
		f5.setPosition(points[i].x, points[i].y);
		enemies.add(f5);
		f5.setLeft(true);
		}
			if(i==19)
			{
				f6 = new FireSkull(tileMap);
		f6.setPosition(points[i].x, points[i].y);
		enemies.add(f6);
		f6.setLeft(true);}
			else {
			s.setPosition(points[i].x, points[i].y);
			enemies.add(s);
			}
			
			
		
		}
		
	}
	
	
		
	
	public void update() {
		
		//update collectibles
		lp.update();
	    if(player.intersects(lp)) {
	    	lp.setPosition(0, 0);
	    	player.setLives(player.getLives() + 1);
	    	itemPickup.play();
	    }
		//update collectibles
		hp.update();
	    if(player.intersects(hp)) {
	    	hp.setPosition(0, 0);
	    	player.setHealth(5);
	    	itemPickup.play();
	    }
		
		// update player
		player.update();
		tileMap.setPosition(
			GamePanel.WIDTH / 2 - player.getx(),
			GamePanel.HEIGHT / 2 - player.gety()
		);
		
	
		if((player.getx()<2580&&player.getx()>2520)&&(player.gety()<120&&player.gety()>60)&& work)
		{
	
			bgMusic.stop();
			gsm.lives = player.getLives();
			gsm.health = player.getHealth();
			gsm.setState(GameStateManager.FINALSTATE);
		}
		if(Player.getHealth()==0) {
			if(player.getLives() == 1) {
				bgMusic.close();
		      	gsm.setState(GameStateManager.DEATHSTATE);
	     	}
			
			
			
			enemies.removeAll(enemies);
			populateEnemies();
			
			player.setHealth(5);
			player.setLives(player.getLives() - 1);
			player.setPosition(43,879);
			
			hp.setPosition(1215, 340);
			lp.setPosition(2170, 160);
		}
		
		
		// set background
		bg1.setPosition(tileMap.getx(), tileMap.gety());
		bg2.setPosition(tileMap.getx(), tileMap.gety());
		bg3.setPosition(tileMap.getx(), tileMap.gety());
		
	//	player.checkAttack(coin);
		player.checkAttack(enemies);
		de.update();
	
		f1.checkFire(player);
		f1.setClose(true);
		
		f2.checkFire(player);
		f2.setClose(true);
		
		f3.checkFire(player);
		f3.setClose(true);
		
		f4.checkFire(player);
		f4.setClose(true);
		
		f5.checkFire(player);
		f5.setClose(true);

		f6.checkFire(player);
		f6.setClose(true);
		// update all enemies
		 
		for(int i = 0; i < enemies.size(); i++) {
			Enemy e = enemies.get(i);
			e.update();
			
			
		
			if(e.isDead()) {
				enemies.remove(i);
				i--;
				explosions.add(
			new Explosion(e.getx(), e.gety()));
				
			}
		}
		
		
		// update explosions
		for(int i = 0; i < explosions.size(); i++) {
			explosions.get(i).update();
			if(explosions.get(i).shouldRemove()) {
				explosions.remove(i);
				i--;
			}
		}
		
	}
	
	
	public void draw(Graphics2D g) {
		
		// draw bg
		bg1.draw(g);
		bg2.draw(g);
		bg3.draw(g);
		
		
		de.draw(g);
		// draw tilemap
		tileMap.draw(g);
		
		//draw Collectibles
		lp.draw(g);
		hp.draw(g);
		
		// draw player
		player.draw(g);
		
		// draw enemies
		for(int i = 0; i < enemies.size(); i++) {
			enemies.get(i).draw(g);
			
			
		}
	/*	for(int i = 0; i < coin.size(); i++) {
			coin.get(i).draw(g);
			
		
		}*/
		// draw explosions
		for(int i = 0; i < explosions.size(); i++) {
			explosions.get(i).setMapPosition(
				(int)tileMap.getx(), (int)tileMap.gety());
			explosions.get(i).draw(g);
		}
		
		// draw hud
		hud.draw(g);
		
	}
	
	public void keyPressed(int k) {
		if(k == KeyEvent.VK_LEFT) player.setLeft(true);
		if(k == KeyEvent.VK_RIGHT) player.setRight(true);
		if(k == KeyEvent.VK_UP) player.setUp(true);
		if(k == KeyEvent.VK_DOWN) player.setDown(true);
		if(k == KeyEvent.VK_W) player.setJumping(true);
		if(k == KeyEvent.VK_E) player.setGliding(true);
		if(k == KeyEvent.VK_ENTER)work = true;
		if(k == KeyEvent.VK_R) player.setScratching();
		if(k == KeyEvent.VK_F) player.setFiring();
		if(k == KeyEvent.VK_ESCAPE) gsm.setPaused(true);
		if(gsm.paused) {
			if(k == KeyEvent.VK_ENTER) gsm.setPaused(false);
			if(k == KeyEvent.VK_M) {
				bgMusic.stop();
				gsm.setPaused(false);
				gsm.setState(gsm.MENUSTATE);
			}
		}
	}
	
	public void keyReleased(int k) {
		if(k == KeyEvent.VK_LEFT) player.setLeft(false);
		if(k == KeyEvent.VK_RIGHT) player.setRight(false);
		if(k == KeyEvent.VK_UP) player.setUp(false);
		if(k == KeyEvent.VK_DOWN) player.setDown(false);
		if(k == KeyEvent.VK_W) player.setJumping(false);
		if(k == KeyEvent.VK_E) player.setGliding(false);
		if(k == KeyEvent.VK_ENTER)work=false;
	}
	
	public void enter() {
		gsm.setPaused(false);
		
	}
}












