package Entity.Enemies;

import Entity.*;
import TileMap.TileMap;

import java.awt.image.BufferedImage;
import java.util.ArrayList;
import java.util.HashMap;
import java.awt.Graphics2D;

import javax.imageio.ImageIO;

import Audio.AudioPlayer;

public class FireSkull extends Enemy {
	
	private BufferedImage[] sprites;           //stores sprite sheets
	private HashMap<String, AudioPlayer> sfx;  //stores audio files
	private ArrayList<DarkEnergy> darkEn;      //stores DarkEnergy bullets
		
	private long time;                         //variable used as a timer
	
	private boolean firing;
	private boolean close;
	
	
	public FireSkull(TileMap tm) {
		
		super(tm);                             //calls the super class
		

		maxSpeed = 0.3;
		fallSpeed = 0.2;
		maxFallSpeed = 10.0;
		
		//dimensions of sprites
		width = 30;
		height = 30;
		
		//dimensions of collision box
		cwidth = 20;
		cheight = 20;
		
		health = maxHealth = 10;
		damage = 1;
		
		// load sprites
		try {
			
			BufferedImage spritesheet = ImageIO.read(
				getClass().getResourceAsStream(
					"/Sprites/Enemies/fireskull.png"
				)
			);
			
			sprites = new BufferedImage[3];
			for(int i = 0; i < sprites.length; i++) {
				sprites[i] = spritesheet.getSubimage(
					i * width,
					0,
					width,
					height
				);
			}
			
		}
		catch(Exception e) {
			e.printStackTrace();
		}
		
		sfx = new HashMap<String, AudioPlayer>();
		sfx.put("death", new AudioPlayer("/SFX/enemyhit.mp3"));
		
		animation = new Animation();
		animation.setFrames(sprites);
		animation.setDelay(300);
		
		
		darkEn = new ArrayList<DarkEnergy>();
		
		right = true;
		facingRight = true;
		
	}
	
	//public boolean isRight() {return right;}
	public void setLeft(boolean b) {right = !b; facingRight = !b;}
    
	public void setFiring() {firing = true;}
//	public boolean getFiring() { return firing;}
	public  void playerClose(boolean b) {close = b;}
	
	private void getNextPosition() {
		
		
		
		// movement
		if(!right) {
			dx -= moveSpeed;
			if(dx < -maxSpeed) {
				dx = -maxSpeed;
			}
		}
		
		// falling
		if(falling) {
			dy += fallSpeed;
		}
		
	}
	
	public void update() {
		
		
		
		if(close) {
			enemyAttack();
		}
		
		
		
		time++;
		
	
		
		//enemy attack 
		for(int i = 0; i  < darkEn.size(); i++) {
			darkEn.get(i).update();
			if(darkEn.get(i).shouldRemove()) {
				darkEn.remove(i);
				i--;
			}
		}
				
		
		// update position
		getNextPosition();
		checkTileMapCollision();
		setPosition(xtemp, ytemp);
		
		//check voice
		if(health == 0)
			sfx.get("death").play();
			
		
		
		// check flinching
		if(flinching) {
			long elapsed =
				(System.nanoTime() - flinchTimer) / 1000000;
			if(elapsed > 400) {
				flinching = false;
			}
		}
		
		// if it hits a wall, go other direction
	
		
		// update animation
		animation.update();
		
		
		
	}
	
	public void enemyAttack() {
		
			if(time < 200) return;
				DarkEnergy fb = new DarkEnergy(tileMap, facingRight);
				fb.setPosition(x + 10, y);
				darkEn.add(fb);
				time = 0;
	
				
	}
	
	public void setClose(boolean b) {close = true;}
	
	
	
public void checkFire(Player p) {
		
	//	if(getFiring() == false) return;
		// fireballs
		for(int j = 0; j < darkEn.size(); j++) {
		//	System.out.print("FOR");
				/*if(darkEn.get(j).intersects(p,darkEn.get(j))) {
					//p.hit(fireBallDamage);
					System.out.println("Hit");
					darkEn.get(j).setHit();
					break;
				}*/
            
			if(p.getx() - darkEn.get(j).getx() < 20 && darkEn.get(j).getx() - p.getx() < 20 &&
			   p.gety() - darkEn.get(j).gety() < 20 && darkEn.get(j).gety() - p.gety() < 20) {
				
				p.hit(1);
				darkEn.remove(j);
				
				
		     }
		}
					
					
	}
	
	public void draw(Graphics2D g) {
		
		//if(notOnScreen()) return;
		
		setMapPosition();
		
		// draw fireballs
				for(int i = 0; i < darkEn.size(); i++) {
					darkEn.get(i).draw(g);
				}
				
				if(flinching) {
					long elapsed =
						(System.nanoTime() - flinchTimer) / 1000000;
					if(elapsed / 100 % 2 == 0) {
						return;
					}
				}
				
		
		super.draw(g);
		
		
		
	}
	
}











