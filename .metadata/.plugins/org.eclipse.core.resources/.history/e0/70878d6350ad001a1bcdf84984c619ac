package GameState;

import Main.GamePanel;
import TileMap.*;
import Entity.*;
import Entity.Enemies.*;
import Entity.Enemies.Coin;
import Audio.AudioPlayer;

import java.awt.*;
import java.awt.event.KeyEvent;
import java.util.ArrayList;

public class Level2B extends GameState {
	
	private String[] options = {
			"I GUESS YOU CHOSE WRONG",
			"CURSE: HALF HEALTH"	
		};
	private Color titleColor;
	private Font titleFont;
	
	private TileMap tileMap;
	private Background bg1,bg2,bg3,bg4,bg5;
	
	private Player player;
	
	private ArrayList<Enemy> enemies;
	private ArrayList<Explosion> explosions;
	
	private Coin coin1,coin2;
	
	private HUD hud;
	
	private AudioPlayer bgMusic, itemPickup;
	
	private LivesPack lp;
	
	//---------------------------------------------------------------------//
	
	public Level2B(GameStateManager gsm) {
		super(gsm);             //calling the super class
		
	
		titleColor = new Color(128, 0, 0);
		titleFont = new Font(
				"Century Gothic",
				Font.BOLD,
				11);
		
		init();
	}
	
	public void init() {
		
		//Initializing the different variables and elements in the level
		
		tileMap = new TileMap(30);
		tileMap.loadTiles("/Tilesets/Bmaptileset.png");
		tileMap.loadMap("/Maps/lvl2b.map");
		tileMap.setPosition(0, 0);
		tileMap.setTween(1);
		
		bg1 = new Background("/Backgrounds/cavebg1.png", 0.1);
		bg2 = new Background("/Backgrounds/cavebg2.png", 0.12);
		bg3 = new Background("/Backgrounds/cavebg3.png", 0.14);
		bg4 = new Background("/Backgrounds/cavebg4.png", 0.16);
		bg5 = new Background("/Backgrounds/cavebg5.png", 0.2);
		
		bg4.setVector(-0.3, 0);	
		
		player = new Player(tileMap);
		player.setPosition(75, 224);
		player.setMaxHealth(3);
		
		populateEnemies();
		
		explosions = new ArrayList<Explosion>();
		
		hud = new HUD(player);
		
		bgMusic = new AudioPlayer("/Music/Blevelmusic.mp3");
		itemPickup = new AudioPlayer("/SFX/menuselect.mp3");
		
		bgMusic.play();
		
		lp = new LivesPack(tileMap);
		lp.setPosition(2500, 195);
		
		player.setHealth(gsm.health);
		player.setLives(gsm.lives);
		
	}
	
	private void populateEnemies() {
		
		enemies = new ArrayList<Enemy>();
		Slime s;
		
		Coin coin;
		
		Point[] points = new Point[] {
			//ingame objects
			new Point(2468, 517),
			new Point(2697, 517),
			//enemies
			new Point(730, 510),
			new Point(820, 490),
			new Point(840, 490),
			new Point(860, 490),
			new Point(940, 510),
			new Point(950, 510),
			new Point(960, 510),
			new Point(970, 510),
			new Point(1110, 510),
			new Point(1120, 510),
			new Point(1130, 510),
			new Point(1140, 510),
			new Point(1150, 510),
			new Point(1160, 510)
			
		};
		
		//Creating enemy objects and adding them to the ArrayList
		for(int i = 0; i < points.length; i++) {
			if(i == 0) {
				coin1 = new Coin(tileMap, "/ItemSprite/gatea.png");
				coin1.setPosition(points[i].x, points[i].y);
				enemies.add(coin1);
			
				
			}
			else if(i ==1) {
				coin2 = new Coin(tileMap, "/ItemSprite/gateb.png");
				coin2.setPosition(points[i].x, points[i].y);
				enemies.add(coin2);
			
				
			}
			
			else {
			s = new Slime(tileMap);
			s.setPosition(points[i].x, points[i].y);
			enemies.add(s);
			}
		}
		
		
		
	}
	
	public void update() {
		
		lp.update();
	    if(player.intersects(lp)){
	    	lp.setPosition(0, 0);
	    	player.setLives(player.getLives() + 1);
	    	itemPickup.play();
	    	
	    }
	    
		
		//Update Level Changing Condition
		if(player.intersects(coin1)) {
			bgMusic.close();
			gsm.lives = player.getLives();
			gsm.health = player.getHealth();
			gsm.setState(gsm.LEVEL3A);
		}
		//Update Level Changing Condition
		if(player.intersects(coin2)) {
			bgMusic.close();
			gsm.lives = player.getLives();
			gsm.health = player.getHealth();
			gsm.setState(gsm.LEVEL3B);
		}
		
		//update Losing Condition
		if(player.dyingCondition(1500, 2746, 590) || player.getHealth() == 0) {
			
			if(player.getLives() == 1) {
				bgMusic.close();
		      	gsm.setState(gsm.DEATHSTATE);
	     	}
			
			
			
			enemies.removeAll(enemies);
			populateEnemies();
			
			player.setHealth(3);
			player.setLives(player.getLives() - 1);
			player.setPosition(75, 224);
			
			lp.setPosition(2500, 195);
		}
		
		
		
		//update music
		bgMusic.loop();
		
		// update player
		player.update();
		tileMap.setPosition(
			GamePanel.WIDTH / 2 - player.getx(),
			GamePanel.HEIGHT / 2 - player.gety()
		);
		
		// set background
		bg1.setPosition(tileMap.getx());
		bg2.setPosition(tileMap.getx());
		bg3.setPosition(tileMap.getx());
		bg5.setPosition(tileMap.getx());
		
		bg4.update();
		
		// attack enemies
		player.checkAttack(enemies);
		
		// update explosions
				for(int i = 0; i < explosions.size(); i++) {
					explosions.get(i).update();
					if(explosions.get(i).shouldRemove()) {
						explosions.remove(i);
						i--;
					}
				}
		coin1.update();
		coin2.update();
		
		// update all enemies
		for(int i = 1; i < enemies.size(); i++) {
			Enemy e = enemies.get(i);
			e.update();
			if(e.isDead()) {
				enemies.remove(i);
				i--;
				explosions.add(
					new Explosion(e.getx(), e.gety()));
			}
		}
		
		
		
	}
	
	public void draw(Graphics2D g) {
		
		//draw font
		g.setColor(titleColor);
		g.setFont(titleFont);
				
		
		
		// draw bg
		bg1.draw(g);
		bg2.draw(g);
		bg3.draw(g);
		bg4.draw(g);
		bg5.draw(g);
		
		
		// draw tilemap
		tileMap.draw(g);
		
		//draw coin
		enemies.get(0).draw(g);
		
		// draw player
		player.draw(g);
		
		// draw explosions
		for(int i = 0; i < explosions.size(); i++) {
			explosions.get(i).setMapPosition(
				(int)tileMap.getx(), (int)tileMap.gety());
			explosions.get(i).draw(g);
		}
		
		
		// draw enemies
		for(int i = 1; i < enemies.size(); i++) {
			enemies.get(i).draw(g);
		}
		
	
		
		
		// draw hud
		hud.draw(g);
		if((player.getx() > 550 && player.getx() < 600)) {
		g.setFont(titleFont);
		for(int i = 0; i < 2; i++) {
			if(i < 2) {
			g.setColor(Color.white);
			g.drawString(options[i], 75, 75 + i * 15);
		    }
			
			
		}
		}
		
		lp.draw(g);
		
	}
	
	public void keyPressed(int k) {
		if(k == KeyEvent.VK_LEFT) player.setLeft(true);
		if(k == KeyEvent.VK_RIGHT) player.setRight(true);
		if(k == KeyEvent.VK_UP) player.setUp(true);
		if(k == KeyEvent.VK_DOWN) player.setDown(true);
		if(k == KeyEvent.VK_W) player.setJumping(true);
		if(k == KeyEvent.VK_E) player.setGliding(true);
		if(k == KeyEvent.VK_R) player.setScratching();
		if(k == KeyEvent.VK_ESCAPE) gsm.setPaused(true);
		if(gsm.paused) {
			if(k == KeyEvent.VK_ENTER) gsm.setPaused(false);
			if(k == KeyEvent.VK_M) {
				bgMusic.stop();
				gsm.setPaused(false);
				gsm.setState(gsm.MENUSTATE);
			}
		}
	}
	
	public void keyReleased(int k) {
		if(k == KeyEvent.VK_LEFT) player.setLeft(false);
		if(k == KeyEvent.VK_RIGHT) player.setRight(false);
		if(k == KeyEvent.VK_UP) player.setUp(false);
		if(k == KeyEvent.VK_DOWN) player.setDown(false);
		if(k == KeyEvent.VK_W) player.setJumping(false);
		if(k == KeyEvent.VK_E) player.setGliding(false);
	}
	
}












